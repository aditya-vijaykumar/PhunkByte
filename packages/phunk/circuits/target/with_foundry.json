{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":16495812921670899781,"abi":{"parameters":[{"name":"inputs","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"expected_hash","type":{"kind":"field"},"visibility":"public"},{"name":"expected_nullifier","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"34710786507721326":{"error_kind":"string","string":"Input array is null (all zeros)"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6021969860841305375":{"error_kind":"string","string":"Computed nullifier does not match expected value"},"8067533318962816708":{"error_kind":"string","string":"Computed hash is zero (nullified)"},"17266210898307776605":{"error_kind":"string","string":"Computed hash does not match expected value"}}},"bytecode":"H4sIAAAAAAAA/9VZvW4TQRCeu4tj599JnNjOLyS2gW7XdxffdaGAHgENEgUWjqhA1DwDDX0aGiQKXiJUaXgJJCQaqrSIW7ITTdbWFbkZ6zLSakc758/f7Ky/Hfk8uLQH2ehZf8bOHowbrh3bWRUzzYilKN+qJOGqAG6NYIXqKIpGg/5Ih/qV6qfDJFZRPDxKdKLjJH7dT8JwlETJIB2mA5XqKBzpkzgNTyyYVN41ssFMuGqah80DmcM2J0l4TgB3vuSHzeDNA/9hm8S1aP41y5UbdwF4f7xoPjNPzrO0yJwz97k0NVkUqPUS8ApTYDku2XmaIuuDjMguSxJeFsBdgXKLrMl7hWwwE64I1wXLlVu8OGtUh9sh2Jw5r0K5BdvUZBX4BXsNZAR7DaYv2AHICPa6JOF1AdwGlFuwTd4NssFMuCJc65Yrt3hx1mgDbodgc+a8CeUWbFOTTeAX7CbICHYTxkVaYk+49iGPZ1Hs1s1zjtwFvAzdi/Cv9T3i+8RvWR8/187GVja2s7FD1tEC5loxXqa6zVibXeA9/25tdkkNtoi/TfwdpzZ72djPxp1s3LXr02x89kCm8TmQJHwggHsI5W58TN6HZIOZcHPFUBWza3uqCloez6L16oBME8TNs3tznn13YZKAmTOGQjVD/A7xu3BdwMwLs3vZuA+XL9Dcy4W7EaxAOcVPMudZxpx7wCv4WO8KyR8bksDGffLMLHmuSnx8f7Tx82H7/fmXRyQE9ZxYMyfWsvPb869nj598oKH/F66x7703L358vnhHYx07v4TT389+nf6hsa6d9y8+nn17/ukprntOHlf5kDhnY4T4DRl8RWsDTi70e5GHT2LHTBwQDxvUCoyb78Tw2ZrDz+Pnp10uwYTvQsN/guifF7if/wAX6Y0XgSAAAA==","debug_symbols":"5ZfdaoMwGIbvJcc9yPfl197KGMW2WgRR8WcwpPe+tBjpnLS8DHYwz0zyPkk+Hkx0FOfsOFwORZXXndi/jaKsT2lf1FVojULeu7omrW6trk/bXuwN805k1Tk8KXvdibwoM7G3fH3fCUIBRgGFAhoFDApYFHAo4FEggcXhqmHXBMsm2DbBugn2TbBwgo0TrJxg5ww7Z/z9hp0z7JxXnVtJE2HJLIlV58rYidAsZ4LDcj+izEkyZVkRPw+TohgmpfyLsOS4C5LOPA87baasS9SyRruBGt1va3TzTtjpF2FyXsVte8l/VaPfQI2rZ5eXcXbPevkZIGGCYIJhQv0PVyT9HCa9PD2V3kSVZhNVrt4SxFpHJux9yayeuuHYN/MN4L6vExrHtijL4nJ4/L8I3R9pW6THMpua+VCdHkb7zyaORL5p61N2HtrsNtN9LEz/BQ==","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use std::hash::poseidon2;\n\n/// The main circuit function computes a primary hash from a 4-element input array\n/// and derives a nullifier from the primary hash and a nonce.\n/// It asserts that both the computed hash and nullifier match their expected public values.\nfn main(\n    inputs: [Field; 4],\n    nonce: Field,\n    expected_hash: pub Field,\n    expected_nullifier: pub Field\n) {\n    // Validate that the input array is not entirely zero.\n    let mut non_zero_found = false;\n    for i in 0..inputs.len() {\n        if inputs[i] != 0 {\n            non_zero_found = true;\n        }\n    }\n    assert(non_zero_found, \"Input array is null (all zeros)\");\n\n    // Compute the primary hash using Poseidon2 over all 4 inputs.\n    let computed_hash = poseidon2::Poseidon2::hash(inputs, inputs.len());\n    assert(computed_hash != 0, \"Computed hash is zero (nullified)\");\n\n    // Derive a nullifier from the computed hash and nonce.\n    // We pack the computed hash and nonce into a 4-element array (padding with zeros)\n    // and hash only the first two elements.\n    let computed_nullifier = poseidon2::Poseidon2::hash([computed_hash, nonce, 0, 0], 2);\n\n    // Verify that the computed hash and nullifier match the expected public values.\n    assert(computed_hash == expected_hash, \"Computed hash does not match expected value\");\n    assert(computed_nullifier == expected_nullifier, \"Computed nullifier does not match expected value\");\n}\n\n#[test]\nfn test_valid_inputs() {\n    // Define valid nonzero inputs and a nonce.\n    let inputs: [Field; 4] = [1, 2, 3, 4];\n    let nonce: Field = 5;\n    // Compute the expected outputs using the same hash functions.\n    let expected_hash = poseidon2::Poseidon2::hash(inputs, inputs.len());\n    let expected_nullifier = poseidon2::Poseidon2::hash([expected_hash, nonce, 0, 0], 2);\n    // Execute the circuit with the valid witness values.\n    main(inputs, nonce, expected_hash, expected_nullifier);\n}\n\n#[test(should_fail_with = \"Input array is null\")]\nfn test_all_zero_inputs_should_fail() {\n    // An input array of all zeros should trigger input validation.\n    let inputs: [Field; 4] = [0, 0, 0, 0];\n    let nonce: Field = 5;\n    // The expected outputs here are arbitrary since the circuit should fail before using them.\n    main(inputs, nonce, 0, 0);\n}\n\n#[test(should_fail_with = \"Computed hash does not match expected value\")]\nfn test_incorrect_expected_hash_should_fail() {\n    // Use valid inputs but provide an incorrect expected hash.\n    let inputs: [Field; 4] = [1, 2, 3, 4];\n    let nonce: Field = 5;\n    let computed_hash = poseidon2::Poseidon2::hash(inputs, inputs.len());\n    let computed_nullifier = poseidon2::Poseidon2::hash([computed_hash, nonce, 0, 0], 2);\n    // Deliberately alter the expected hash.\n    let wrong_hash = computed_hash + 1;\n    main(inputs, nonce, wrong_hash, computed_nullifier);\n}\n\n#[test(should_fail_with = \"Computed nullifier does not match expected value\")]\nfn test_incorrect_expected_nullifier_should_fail() {\n    // Use valid inputs but provide an incorrect expected nullifier.\n    let inputs: [Field; 4] = [1, 2, 3, 4];\n    let nonce: Field = 5;\n    let computed_hash = poseidon2::Poseidon2::hash(inputs, inputs.len());\n    let computed_nullifier = poseidon2::Poseidon2::hash([computed_hash, nonce, 0, 0], 2);\n    // Deliberately alter the expected nullifier.\n    let wrong_nullifier = computed_nullifier + 1;\n    main(inputs, nonce, computed_hash, wrong_nullifier);\n}\n\n#[test]\nfn test_hash_consistency() {\n    // Verify that hashing the same inputs twice yields the same result.\n    let inputs: [Field; 4] = [7, 8, 9, 10];\n    let hash1 = poseidon2::Poseidon2::hash(inputs, inputs.len());\n    let hash2 = poseidon2::Poseidon2::hash(inputs, inputs.len());\n    assert(hash1 == hash2, \"Hash function is not consistent for the same inputs\");\n}\n\n#[test]\nfn test_nullifier_uniqueness() {\n    // Verify that different nonces yield different nullifiers for the same input.\n    let inputs: [Field; 4] = [1, 3, 5, 7];\n    let nonce1: Field = 9;\n    let nonce2: Field = 10;\n    let computed_hash = poseidon2::Poseidon2::hash(inputs, inputs.len());\n    let nullifier1 = poseidon2::Poseidon2::hash([computed_hash, nonce1, 0, 0], 2);\n    let nullifier2 = poseidon2::Poseidon2::hash([computed_hash, nonce2, 0, 0], 2);\n    assert(nullifier1 != nullifier2, \"Nullifiers must differ for different nonces\");\n}\n","path":"/Users/auralshin/projects/phunk/circuits/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert"]}